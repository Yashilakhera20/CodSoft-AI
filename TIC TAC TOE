import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")
        self.board = [' ' for _ in range(9)]
        self.player_choice = 'X'
        self.ai_choice = 'O'
        self.current_player = 'X'
        self.buttons = []
        self.create_choice_buttons()

    def create_choice_buttons(self):
        self.choice_frame = tk.Frame(self.root)
        self.choice_frame.pack()
        tk.Label(self.choice_frame, text="Choose your symbol :",width=30).pack(side=tk.LEFT)
        tk.Button(self.choice_frame, text="X",width=5, command=lambda: self.set_player_choice('X')).pack(side=tk.LEFT)
        tk.Button(self.choice_frame, text="O",width=5, command=lambda: self.set_player_choice('O')).pack(side=tk.LEFT)

    def set_player_choice(self, choice):
        self.player_choice = choice
        self.ai_choice = 'O' if choice == 'X' else 'X'
        self.current_player = 'X'
        self.choice_frame.destroy()
        self.create_board()

    def create_board(self):
        for i in range(9):
            button = tk.Button(self.root, text=' ', font='Arial 20', width=5, height=2,bg='black',fg='crimson',
                               command=lambda i=i: self.on_button_click(i))
            button.grid(row=i//3, column=i%3)
            self.buttons.append(button)

    def on_button_click(self, index):
        if self.board[index] == ' ':
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_board()
            elif ' ' not in self.board:
                messagebox.showinfo("Game Over", "It's a draw!")
                self.reset_board()
            else:
                self.current_player = self.ai_choice if self.current_player == self.player_choice else self.player_choice
                if self.current_player == self.ai_choice:
                    self.ai_move()

    def reset_board(self):
        self.board = [' ' for _ in range(9)]
        for button in self.buttons:
            button.config(text=' ')
        self.current_player = self.player_choice

    def check_winner(self):
        winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                                (0, 3, 6), (1, 4, 7), (2, 5, 8),
                                (0, 4, 8), (2, 4, 6)]
        for combo in winning_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] != ' ':
                return True
        return False

    def ai_move(self):
        best_score = float('-inf')
        best_move = None
        for i in range(9):
            if self.board[i] == ' ':
                self.board[i] = self.ai_choice
                score = self.minimax(self.board, 0, False, float('-inf'), float('inf'))
                self.board[i] = ' '
                if score > best_score:
                    best_score = score
                    best_move = i
        self.board[best_move] = self.ai_choice
        self.buttons[best_move].config(text=self.ai_choice)
        if self.check_winner():
            messagebox.showinfo("Game Over", f"Player {self.ai_choice} wins!")
            self.reset_board()
        elif ' ' not in self.board:
            messagebox.showinfo("Game Over", "It's a draw!")
            self.reset_board()
        else:
            self.current_player = self.player_choice

    def minimax(self, board, depth, is_maximizing, alpha, beta):
        if self.check_winner():
            return 1 if is_maximizing else -1
        elif ' ' not in board:
            return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if board[i] == ' ':
                    board[i] = self.ai_choice
                    score = self.minimax(board, depth + 1, False, alpha, beta)
                    board[i] = ' '
                    best_score = max(score, best_score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if board[i] == ' ':
                    board[i] = self.player_choice
                    score = self.minimax(board, depth + 1, True, alpha, beta)
                    board[i] = ' '
                    best_score = min(score, best_score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break
            return best_score

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
